#!/usr/bin/python
# -*- coding: utf-8 -*-
"""
    th-e-srvy
    ~~~~~~~~~
    
    To learn how to configure a survey of an energy system, see "th-e-srvy --help"

"""
import os
import inspect
import traceback

from argparse import ArgumentParser, RawTextHelpFormatter
from th_e_core import Settings, ConfigurationException
from th_e_data import Evaluation
from th_e_srvy import System


def main(**kwargs) -> None:
    action = kwargs.pop('action')

    systems = System.read(settings)
    if action == 'eval':
        eval(systems, **kwargs)

    elif action == 'build':
        build(systems, **kwargs)


# noinspection PyShadowingBuiltins, PyBroadException
def eval(systems, **kwargs):
    logger.info(f"Running TH-E Survey for {len(systems)} system{'s' if len(systems) > 1 else ''}")
    results = []
    for system in systems:
        system.build(**kwargs)
        result = system.evaluate(**kwargs)
        results.append(result)

    evaluation = Evaluation.read(settings)
    evaluation(results)

    logger.info("Finished TH-E Survey")


def build(systems, clean: bool = False, **kwargs):
    from th_e_srvy.pv import ModuleDatabase, InverterDatabase

    logger.info('Starting module library build')
    modules = ModuleDatabase(settings)
    if clean:
        modules.clean()
    modules.build()

    logger.info('Starting inverter library build')
    inverters = InverterDatabase(settings)
    if clean:
        inverters.clean()
    inverters.build()

    systems.build(**kwargs)


def _get_parser():
    from th_e_srvy import __version__

    parser = ArgumentParser(description=__doc__, formatter_class=RawTextHelpFormatter)
    parser.add_argument('-v', '--version',
                        action='version',
                        version='%(prog)s {version}'.format(version=__version__))

    subparsers = parser.add_subparsers(dest='action')
    subparsers.default = 'eval'
    subparsers.add_parser('eval', help='Retrieve weather information and evaluate the configured survey')
    subparsers.add_parser('build', help='Build required data if possible and the module and inverter database')

    return parser


if __name__ == "__main__":
    run_dir = os.path.dirname(os.path.abspath(inspect.getsourcefile(main)))
    if os.path.basename(run_dir) == 'bin':
        run_dir = os.path.dirname(run_dir)

    os.chdir(run_dir)

    settings = Settings('th-e-srvy', parser=_get_parser())

    import logging
    logger = logging.getLogger('th-e-srvy')
    main(**settings.general)
